apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: "org.sonarqube"
apply plugin: "org.owasp.dependencycheck"

android {
    namespace 'com.sudoplatform.sudoapiclient'

    compileSdkVersion 35

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 35
        versionName "12.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: "true"
    }

    testOptions {
        animationsDisabled = true

        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
       }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    sourceSets {
        main { res.srcDirs = ['src/main/res', 'src/test/main/res', 'src/test/resources'] }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Core library desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'

    // AWS SDKs
    //
    // AWS SDKs do not follow semantic versioning rules so we need to strictly specify AWS SDK versions.
    // Follow the process at https://anonyome.atlassian.net/wiki/spaces/PLA/pages/840073287/AWS+Android+SDK+versions+to+use+for+platform+SDKs
    // for updating AWS SDK versions.
    implementation "com.amazonaws:aws-android-sdk-core:$aws_version!!"

    // Amplify
    implementation "com.amplifyframework:core-kotlin:$amplify_version"
    implementation "com.amplifyframework:aws-api-appsync:$amplify_version"
    implementation "com.amplifyframework:aws-api:$amplify_version"
    implementation "com.amplifyframework:aws-auth-cognito:$amplify_version"

    implementation "com.squareup.okhttp3:okhttp:5.1.0"
    implementation 'com.appmattus.certificatetransparency:certificatetransparency-android:2.8.2'

    androidTestImplementation 'androidx.test:runner:1.7.0'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation "io.kotlintest:kotlintest-assertions:3.4.2"

    // Sudo Platform SDKs.
    implementation 'com.sudoplatform:sudologging:6.0.0'
    implementation 'com.sudoplatform:sudoconfigmanager:9.0.0'
    implementation 'com.sudoplatform:sudouser:21.0.0'
}

// Returns a list of `configurations` which should not be scanned for vulnerabilities
def getConfigurationsToSkip = { configs ->
    configs.findAll {
        it.name.startsWithAny("androidTest", "test", "lint") ||
                it.name.contains("AndroidTest") ||
                it.name.contains("UnitTest")
    }.collect {
        it.name
    }
}

tasks.register("printConfigurationsToSkip") {
    group = "OWASP dependency-check"
    description = "Print the configurations which are skipped when scanning for vulnerable dependencies"
    doLast {
        println "Configurations to skip when scanning for vulnerable dependencies:"
        println getConfigurationsToSkip(configurations).join("\n")
    }
}

afterEvaluate {
    // NOTE: this must be within `afterEvaluate` to ensure all the configurations have been created before filtering them
    dependencyCheck {
        suppressionFile file("../dependency-suppression.xml").toString()
        failBuildOnCVSS 0
        skipConfigurations = getConfigurationsToSkip(configurations)
        nvd {
            datafeedUrl = "https://anonyome-nist-cve-mirror.s3.amazonaws.com/"
        }
    }
}

// https://github.com/cookpad/LicenseToolsPlugin
apply plugin: "com.cookpad.android.plugin.license-tools"
licenseTools {
    licensesYaml = file("licenses.yml")
    ignoredGroups = ["com.nhaarman:mockito-kotlin", "com.anonyome", "com.sudoplatform"]
    ignoredProjects = ["org.mockito"]
}

@Grab('org.yaml:snakeyaml:1.17') // Yaml parser
import org.yaml.snakeyaml.Yaml

tasks.register("checkLicenseHaveRequiredFields") {
    description = "Check every license entry has the mandatory fields"
    group = "verification"
    doLast {
        def mandatoryFields = ["artifact", "name", "copyrightHolder", "url"]
        Yaml parser = new Yaml()
        def licenses = parser.load((file("licenses.yml") as File).text)
        def errors = new StringBuilder()
        licenses.each { artifact ->
            mandatoryFields.each { field ->
                if (artifact[field] == null) {
                    errors.append("License entry '${artifact.artifact}' is missing required element `$field`\n")
                }
            }
            if (artifact["license"] == null && artifact["licenseUrl"] == null) {
                errors.append("License entry '${artifact.artifact}' must have one of [license,licenseUrl]\n")
            }
        }
        if (errors.length() > 0) {
            throw new GradleException("Missing license elements:\n$errors")
        }
    }
}
checkLicenses.finalizedBy checkLicenseHaveRequiredFields

// Kotlin Lint
apply plugin: 'org.jmailen.kotlinter'

kotlinter {
    reporters = ['checkstyle', 'plain']
}

// Sonarqube code analysis
if (project.file("${rootProject.projectDir}/util/sonarqube.gradle").exists()) {
    ext.sonarProjectKey = "sudo-api-client-android"
    ext.sonarProjectName = "sudo-api-client-android"
    ext.sonarExclusions = ["*.png", "*.jks", "*.json", "*.key"]
    apply from: "${rootProject.projectDir}/util/sonarqube.gradle"
}

ext {
    projectArtifact = 'sudoapiclient'
    projectDescription = 'An Android library used by SudoPlatform SDKs for sharing a single AWS AppSync Client'
    projectUrl = 'https://github.com/sudoplatform/sudo-api-client-android'
    projectSCM = 'scm:git:github.com/sudoplatform/sudo-api-client-android.git'
    if (project.hasProperty('tag')) {
        projectVersion = "$tag"
    } else {
        projectVersion = project.android.defaultConfig.versionName
    }
}

if(project.findProperty("tag") &&
        project.file("${rootProject.projectDir}/util/publish-mavencentral.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-mavencentral.gradle"
}
else if (project.file("${rootProject.projectDir}/util/publish-internal-android.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-internal-android.gradle"
}
