apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "org.sonarqube"
apply plugin: "org.owasp.dependencycheck"

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "2.0.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: "true"
    }

    testOptions {
        animationsDisabled = true

        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
       }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        main { res.srcDirs = ['src/main/res', 'src/test/main/res', 'src/test/resources'] }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // AWS SDKs
    //
    // AWS SDKs do not follow semantic versioning rules so we need to strictly specify AWS SDK versions.
    // Follow the process at https://anonyome.atlassian.net/wiki/spaces/PLA/pages/840073287/AWS+Android+SDK+versions+to+use+for+platform+SDKs
    // for updating AWS SDK versions.
    implementation "com.amazonaws:aws-android-sdk-core:$aws_version!!"
    implementation "com.amazonaws:aws-android-sdk-appsync:$appsync_version!!"

    implementation "com.appmattus.certificatetransparency:certificatetransparency-android:1.0.0"
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.69'
    implementation 'org.bouncycastle:bcpkix-jdk15to18:1.69'

    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation "io.kotlintest:kotlintest-assertions:3.4.2"

    // Sudo Platform SDKs.
    implementation 'com.sudoplatform:sudoconfigmanager:1.3.0'
    implementation 'com.sudoplatform:sudouser:9.4.0'
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            // Bouncy Castle is a transitive dependency of the certificate
            // transparency library. This can be upgraded transparently
            // to bcprov-jdk15on:1.65, but post 1.65 we need to move to bcprov-jdk15to18
            // i.e. different module name, and so we get duplicate classes. Substitute
            // here for the bcprov/bcpkix-jdk15to18 modules
            substitute module("org.bouncycastle:bcprov-jdk15on") with module("org.bouncycastle:bcprov-jdk15to18:1.68")
            substitute module("org.bouncycastle:bcpkix-jdk15on") with module("org.bouncycastle:bcpkix-jdk15to18:1.68")
        }
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

// Returns a list of `configurations` which should not be scanned for vulnerabilities
def getConfigurationsToSkip = { configs ->
    configs.findAll {
        it.name.startsWithAny("androidTest", "test", "lint") ||
                it.name.contains("AndroidTest") ||
                it.name.contains("UnitTest")
    }.collect {
        it.name
    }
}

tasks.register("printConfigurationsToSkip") {
    group = "OWASP dependency-check"
    description = "Print the configurations which are skipped when scanning for vulnerable dependencies"
    doLast {
        println "Configurations to skip when scanning for vulnerable dependencies:"
        println getConfigurationsToSkip(configurations).join("\n")
    }
}

afterEvaluate {
    // NOTE: this must be within `afterEvaluate` to ensure all the configurations have been created before filtering them
    dependencyCheck {
        suppressionFile file("../dependency-suppression.xml").toString()
        failBuildOnCVSS 0
        skipConfigurations = getConfigurationsToSkip(configurations)
    }
}

// https://github.com/cookpad/license-tools-plugin
apply plugin: "com.cookpad.android.licensetools"
licenseTools {
    licensesYaml = file("licenses.yml")
    ignoredGroups = ["com.nhaarman:mockito-kotlin", "com.anonyome", "com.sudoplatform"]
    ignoredProjects = ["org.mockito"]
}

@Grab('org.yaml:snakeyaml:1.17') // Yaml parser
import org.yaml.snakeyaml.Yaml

task checkLicenseHaveRequiredFields {
    description = "Check every license entry has the mandatory fields"
    group = "verification"
    doLast {
        def mandatoryFields = ["artifact", "name", "copyrightHolder", "url"]
        Yaml parser = new Yaml()
        def licenses = parser.load((file("licenses.yml") as File).text)
        def errors = new StringBuilder()
        licenses.each { artifact ->
            mandatoryFields.each { field ->
                if (artifact[field] == null) {
                    errors.append("License entry '${artifact.artifact}' is missing required element `$field`\n")
                }
            }
            if (artifact["license"] == null && artifact["licenseUrl" == null]) {
                errors.append("License entry '${artifact.artifact}' must have one of [license,licenseUrl]\n")
            }
        }
        if (errors.length() > 0) {
            throw new GradleException("Missing license elements:\n$errors")
        }
    }
}
checkLicenses.finalizedBy checkLicenseHaveRequiredFields

apply plugin: 'maven'

ext {
    projectArtifact = 'sudoapiclient'
    projectDescription = 'An Android library used by SudoPlatform SDKs for sharing a single AWS AppSync Client'
    projectUrl = 'https://github.com/sudoplatform/sudo-api-client-android'
    projectSCM = 'scm:git:github.com/sudoplatform/sudo-api-client-android.git'
    if (project.hasProperty('tag')) {
        projectVersion = "$tag"
    } else {
        projectVersion = project.android.defaultConfig.versionName
    }
}

if(project.findProperty("tag") &&
        project.file("${rootProject.projectDir}/util/publish-mavencentral.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-mavencentral.gradle"
}
else if (project.file("${rootProject.projectDir}/util/publish-internal-android.gradle").exists()) {
    apply from: "${rootProject.projectDir}/util/publish-internal-android.gradle"
}

